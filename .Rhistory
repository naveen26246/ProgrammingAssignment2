x<-numeric()
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
set(t)
set(t)
p<-set(t)
p
x[1]
x<-c(5,10,45)
p
x$set
c <- 10
c(c = c)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
x<matrix(1:4,2,2)
x<-matrix(1:4,2,2)
x
makeCacheMatrix(x)
cacheSolve(makeCacheMatrix(x))
y<-cacheSolve(makeCacheMatrix(x))
x*y
x
y
x%*%y
## This file contains two functions makeCacheMatrix and Cachesolve which together
## cab be used to find the inverse of a matrix from cache if available.
## the makeCacheMatrix creates a list of four functions set,get,setinverse and
## getinverse respectively. These can be called from another functions whenever
## neccessary
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
y<-cacheSolve(makeCacheMatrix(x))
y
## This file contains two functions makeCacheMatrix and Cachesolve which together
## cab be used to find the inverse of a matrix from cache if available.
## the makeCacheMatrix creates a list of four functions set,get,setinverse and
## getinverse respectively. These can be called from another functions whenever
## neccessary
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(i) i
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
y<-cacheSolve(makeCacheMatrix(x))
y
## This file contains two functions makeCacheMatrix and Cachesolve which together
## cab be used to find the inverse of a matrix from cache if available.
## the makeCacheMatrix creates a list of four functions set,get,setinverse and
## getinverse respectively. These can be called from another functions whenever
## neccessary
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i<<-inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
y
setinverse(x)
a<-makeCacheMatrix(x)
a$setinverse
b<-a$setinverse
solve(b)
solve(b)b
b
